{
  "name": "collections/blog/posts/5177299be338",
  "__resolveType": "blog/loaders/Blogpost.ts",
  "post": {
    "authors": [
      {
        "name": "Rafael Crespo",
        "email": "rafael@decocms.com",
        "jobTitle": "Co-founder"
      }
    ],
    "categories": [
      {
        "name": "Culture",
        "slug": "culture"
      }
    ],
    "imageCarousel": {
      "banners": []
    },
    "extraProps": [],
    "aggregateRating": {
      "@type": "AggregateRating"
    },
    "review": [],
    "contentRating": [],
    "interactionStatistic": {
      "@type": "InteractionCounter",
      "video": null,
      "image": null
    },
    "title": "Why “Context CMS” Is the next CMS",
    "date": "2025-09-10",
    "slug": "context-is-the-next-CMS",
    "content": "<p>The most impressive AI demos all look the same: a prompt becomes a working screen; a workflow “just works” against live data; a task that used to take days runs in minutes. The most painful post-demo stories also look the same: nobody can say exactly what the agent saw, which actions it took, who approved them, or why a small change suddenly broke everything. Code is cheap now; operating intelligence is not.</p><p></p><p>That gap isn’t about prompts or UIs. It’s about context — the data, tools, models, permissions, and memory that make an AI system useful and safe. If you can’t curate, govern, and observe that context, you don’t have a system. You have a prototype, and you need to scale your prompt to production.</p><p></p><p>This is the case for a <strong>Context CMS</strong>.</p><p></p><p><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">From publishing pages to operating intelligence</span></strong></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">We’ve had “CMS” for nearly three decades, but the letter C meant </span><em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">content</span></em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">. Early web CMSs centralized copy and media so editors could publish websites without emailing HTML around. Headless CMSs decoupled content from presentation and pushed it everywhere via APIs. DXPs wrapped the CMS with personalization, analytics, and A/B testing.</span></p><p></p><p><img src=\"https://assets.decocache.com/decocms/c2372aa3-98a1-4996-9c2f-dc87c9c6ff9a/cms-market-share-decoCMS-style.png\"></p><p></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Those eras were about telling the world something. The agentic era is about </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">doing</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> something. Large models don’t just render text; they initiate refunds, publish pages, open tickets, schedule trucks, move money. The bottleneck is no longer authoring content—it’s </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">governing context</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> so actions are correct, compliant, and cost-controlled.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">A Context CMS is the natural successor: where the old CMS answered </span><em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">“what should users read?”</span></em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">, the Context CMS answers </span><em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">“what should systems and agents know and do, on whose behalf, with which constraints?”</span></em></p><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">What “context” really means</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">In practice, context is five things working together.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">It starts with </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">data</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">—documents, tables, event streams, product catalogs, policy wikis. Then </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">tools</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">—the actions that actually change state: create invoice, publish page, refund order. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Models</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> matter too: which LLM or embedding to use, when to switch, how to route. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Permissions</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> define who and what may act, under what policies, with what approvals. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Memory</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> gives durable state across runs: what to remember, what to forget, and for how long.</span></p><p></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">When those five live in different silos with ad-hoc glue, you get vibe-debugging: nudging prompts in production and hoping the bill and audit log cooperate. When they’re curated and observable behind clear contracts, you get reliable systems.</span></p><p></p><hr><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">So what is a Context CMS?</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Think of it as a </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">control plane</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> for AI operations. It doesn’t replace your apps and data; it orchestrates how intelligence interacts with them.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">A Context CMS </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">collects</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> context from your sources and tools, </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">governs</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> access with policy (roles, approvals, spend caps, secrets, data boundaries), and </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">serves</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> context to agents, workflows, and UIs through stable contracts. It also </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">observes</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> everything—traces, logs, and cost-per-step—so teams can explain what happened, roll back safely, and predict what it will cost next time.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">This is not “yet another AI app builder.” It’s where </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">operations</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> live.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">Two surfaces, one system</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Organizations don’t stop experimenting just because they want governance. Nor should they. The practical pattern emerging is </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">two surfaces sharing one runtime</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">On one surface, non-developers sketch assistants and workflows in natural language against real context. They try things. They discover where AI actually helps. On the other surface, engineers harden the promising bits—adding types, tests, rate limits, deterministic steps, human-in-the-loop, CI/CD. Crucially, the handoff isn’t a rewrite in a different platform; it’s a graduation in the same system. That’s how you avoid the </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">prototype graveyard</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">What “good” looks like in production</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">In a healthy Context CMS, </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">governance</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> is first-class. Before a single run, you can answer who is allowed to do what, with which data, and what must be approved. </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Observability</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> is built-in rather than bolted on: every run has traces and logs; every step has a measured cost; failure states are explicit and alertable. </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Versioning</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\"> covers prompts, policies, schemas, and workflows, with promotion paths and rollbacks that look like modern software delivery, not ritual.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">Economics are explicit. Token spend and API calls aren’t surprises waiting at the end of the month; they’re visible, capped, and attributable per workflow and team. The system is </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">composable</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">: agentic reasoning lives alongside deterministic steps; humans can be brought into the loop wherever risk or ambiguity justifies it. And the surface area is </span><em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">extensible</span></em><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">: connectors, custom tools, UIs, and policies can be added without tearing down what already works.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 11pt\">If your current stack shines at demos but is vague on these points, it will stall as soon as real work begins.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">Why this becomes necessary, not nice-to-have</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Three forces are converging.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">First, boards are asking for measurable productivity gains. That translates to automations that change real systems, not just draft documents. Second, </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">context fragmentation</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> keeps rising. Most organizations already run dozens of SaaS tools and internal services; without a mesh and policy, agents are blindfolded tourists. Third, </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">codegen lowered the barrier to prototypes</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">. The result is a flood of small internal tools—useful, brittle, and ungoverned—unless there’s a place to house them.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">A Context CMS is where you house them.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">Roles in a Context CMS world</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">New roles are coalescing around this operating model. “Vibecoders” are domain experts who sketch assistants in language, discovering where automation helps. “Agentic engineers” are platform-minded developers who turn sketches into services: they model data, enforce policy, and engineer guardrails. “Context stewards” own source systems and set boundaries: which data is authoritative, which actions are allowed. And operations teams treat agents like services: SLOs, runbooks, incident response.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">The companies that scale AI beyond a demo will staff these roles, even if the titles differ.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">How to adopt without boiling the ocean</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">There’s a pragmatic path that doesn’t require a reorg.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Start by </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">inventorying context</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">: authoritative sources, critical actions, sensitive boundaries. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Wrap connectors</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> so access, schemas, and rate limits are consistent. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Turn on telemetry by default</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">; every run should be traceable and costed. </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Codify guardrails</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> early—roles, approvals, geofences, spend caps—so surprises become errors you can handle, not incidents you apologize for. Standardize </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">graduation</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> from vibe to code to staging to prod. And where you see repetition, </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">package reusable modules</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">—not just prompts, but flows and connectors with documented interfaces—so other teams don’t re-invent the same thing.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">Do that a few times, and the value compounds. Your organization moves from “we built a cool thing” to “we run these five automations every day, safely.”</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">What this means for “content CMS”</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">None of this makes a content CMS obsolete. Publishing still matters; content is still the substrate for many experiences. But as agents begin to </span><em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">operate</span></em><span style=\"color: rgb(0, 0, 0); font-size: 12pt\"> the business, a content CMS alone can’t answer the operational questions: who approved this refund, why did the page publish now, how did that decision get made, and what did it cost?</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">In short: content CMS manages what people read; </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">context CMS manages what systems know and do</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">.</span></p><p></p><hr><p></p><h2><strong><span style=\"color: rgb(0, 0, 0); font-size: 17pt\">Self-learning loop</span></strong></h2><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">When code became cheaper, strategies built on generic software started to look the same. The durable advantage wasn’t a feature checklist; it was the way a company could learn from its own operations and adapt quickly. In an AI era, that learning lives in </span><strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">context</span></strong><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">. The companies that curate it, govern it, and serve it well will operate faster and safer than those that don’t.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">You can chase another demo—or you can build the control plane that turns demos into operations. A Context Management System (Context CMS)&nbsp; is simply a name for that control plane.</span></p><p><span style=\"color: rgb(0, 0, 0); font-size: 12pt\">And once you have it, “prompt to production” stops being a slogan. It becomes the way you work.</span></p>",
    "image": "https://assets.decocache.com/decocms/8c2ea220-d1e8-4a66-be8b-f3606de21ac9/deco.day-2025-(2).png",
    "alt": "context cms is the next cms",
    "seo": {
      "title": "Why “Context CMS” Is the next CMS",
      "description": "The most impressive AI demos all look the same: a prompt becomes a working screen; a workflow “just works” against live data; a task that used to take days runs in minutes. The most painful post-demo stories also look the same: nobody can say exactly what the agent saw, which actions it took, who approved them, or why a small change suddenly broke everything. Code is cheap now; operating intelligence is not.",
      "image": "https://assets.decocache.com/decocms/8c2ea220-d1e8-4a66-be8b-f3606de21ac9/deco.day-2025-(2).png"
    },
    "readTime": 6,
    "excerpt": "Content is now generated by LLMs, so humans now need to manage Context."
  }
}